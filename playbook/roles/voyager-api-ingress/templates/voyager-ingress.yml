apiVersion: voyager.appscode.com/v1beta1
kind: Ingress
metadata:
  name: {{ resources_computed_prefix }}api-ingress
  namespace: {{ astarte_k8s_namespace }}
  annotations:
    ingress.appscode.com/type: {{ voyager_api_ingress_config.type }}
{% if voyager_api_ingress_config.load_balancer_ip %}
    ingress.appscode.com/load-balancer-ip: '{{ voyager_api_ingress_config.load_balancer_ip }}'
{% endif %}
    # Keep source IP - we need this for a number of reasons
    ingress.appscode.com/keep-source-ip: "true"
    # Configure depending on the load
    ingress.appscode.com/replicas: '{{ voyager_api_ingress_config.replicas }}'
    # HSTS
{% if astarte_api_use_ssl or (deploy_astarte_dashboard and astarte_dashboard_use_ssl) %}
    ingress.appscode.com/hsts: "true"
    ingress.appscode.com/hsts-preload: "true"
    ingress.appscode.com/hsts-include-subdomains: "true"
    ingress.appscode.com/hsts-max-age: "100"
{% endif %}
{% if voyager_api_ingress_config.node_selector %}
    ingress.appscode.com/node-selector: '{{ voyager_api_ingress_config.node_selector }}'
{% endif %}
{% if voyager_api_ingress_config.annotations_service %}
    ingress.appscode.com/annotations-service: '{{ voyager_api_ingress_config.annotations_service | to_json | replace('_','-') }}'
{% endif %}
{% if astarte_api_enable_cors %}
    # CORS
    ingress.kubernetes.io/enable-cors: 'true'
{% endif %}
    # Meaningful options
    ingress.appscode.com/default-option: '{"forwardfor": "true", "dontlognull": "true"}'
    # Tunnel is for websockets - 10m is more then enough
    ingress.appscode.com/default-timeout: '{"tunnel": "10m"}'
spec:
{% if (not voyager_bootstrapping_http_01) and (astarte_api_use_ssl or (deploy_astarte_dashboard and astarte_dashboard_use_ssl)) %}
  tls:
  - hosts:
{% if astarte_api_use_ssl %}
    - {{ astarte_api_host }}
{% endif %} # if astarte_api_use_ssl
{% if astarte_dashboard_use_ssl and deploy_astarte_dashboard and astarte_dashboard_use_dedicated_host %}
    - {{ astarte_dashboard_host }}
{% endif %} # if astarte_dashboard_use_ssl and deploy_astarte_dashboard and astarte_dashboard_use_dedicated_host
    ref:
{% if voyager_use_letsencrypt %}
      kind: Certificate
{% if voyager_letsencrypt_challenge == 'dns' %}
      name: {{ resources_computed_prefix }}ingress-certificate
{% else %} # if voyager_letsencrypt_challenge == 'dns'
      name: {{ resources_computed_prefix }}api-ingress-certificate
{% endif %} # if voyager_letsencrypt_challenge == 'dns'
{% else %} # if voyager_use_letsencrypt
      kind: Secret
      name: {{ voyager_tls_broker_secret_name }}
{% endif %} # if voyager_use_letsencrypt
{% endif %} # if (not voyager_bootstrapping_http_01) and (astarte_api_use_ssl or (deploy_astarte_dashboard and astarte_dashboard_use_ssl))
  rules:
  - host: {{ astarte_api_host }}
    http:
      paths:
{% if astarte_api_expose_housekeeping %}
      - path: /housekeeping
        backend:
          serviceName: {{ parent_resources_computed_prefix }}housekeeping
          servicePort: '4000'
          backendRules:
          - 'reqrep ^([^\ :]*)\ /housekeeping(.*$) \1\ /\2'
{% endif %}
      - path: /realm
        backend:
          serviceName: {{ parent_resources_computed_prefix }}realm-management
          servicePort: '4000'
          backendRules:
          - 'reqrep ^([^\ :]*)\ /realm(.*$) \1\ /\2'
      - path: /realmmanagement
        backend:
          serviceName: {{ parent_resources_computed_prefix }}realm-management
          servicePort: '4000'
          backendRules:
          - 'reqrep ^([^\ :]*)\ /realmmanagement(.*$) \1\ /\2'
      - path: /pairing
        backend:
          serviceName: {{ parent_resources_computed_prefix }}pairing
          servicePort: '4000'
          backendRules:
          - 'reqrep ^([^\ :]*)\ /pairing(.*$) \1\ /\2'
      - path: /appengine
        backend:
          serviceName: {{ parent_resources_computed_prefix }}appengine
          servicePort: '4000'
          backendRules:
          - 'reqrep ^([^\ :]*)\ /appengine(.*$) \1\ /\2'
{% if deploy_astarte_dashboard and not astarte_dashboard_use_dedicated_host %}
      - path: /dashboard
        backend:
          serviceName: {{ parent_resources_computed_prefix }}dashboard
          servicePort: '80'
          backendRules:
          - 'reqrep ^([^\ :]*)\ /dashboard(.*$) \1\ /\2'
{% endif %}
{% if deploy_astarte_dashboard and astarte_dashboard_use_dedicated_host %}
  - host: {{ astarte_dashboard_host }}
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ parent_resources_computed_prefix }}dashboard
          servicePort: '80'
{% endif %}
